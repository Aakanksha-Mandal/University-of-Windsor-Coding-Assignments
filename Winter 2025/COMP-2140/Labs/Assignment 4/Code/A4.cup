import java.io.*;

terminal String IDENTIFIER, QUOTEDSTRING, TRUE, FALSE, NUMBER;
terminal PLUS, MINUS, TIMES, DIVIDE, LPAREN, RPAREN, COMMA, SEMICOLON, EQUAL, EQ, NE;
terminal String WRITE, READ, IF, ELSE, RETURN, BEGIN, END, MAIN, STRING, INT_T, REAL_T;

non terminal String Program, Program2, MethodDecl, Type, AssignmentStatement, Block, Statement, StatementList;
non terminal FormalParams, OptionalFormalParams, Expression, ExpressionRest, MultiplicativeExpr, MultiplicativeExprRest, PrimaryExpr, BoolExpression, ActualParams, OptionalActualParams;

precedence left PLUS, MINUS;
precedence left TIMES, DIVIDE;
precedence left EQUAL;
precedence left EQ, NE;
precedence left ELSE;

Program2 ::= Program:e {: RESULT = "import java.io.*;\npublic class A4 {\n\tstatic BufferedReader br_;\n\tstatic BufferedWriter bw_;\n\tstatic double $tmp_real;" + e + "\n}"; :};

Program ::= Program:e1 MethodDecl:e2 {: RESULT = e1 + " " + e2; :}
         | MethodDecl:e {: RESULT = e; :}; 

MethodDecl ::= Type:e1 IDENTIFIER:e2 LPAREN OptionalFormalParams:e3 RPAREN Block:e4 {: RESULT = "\n\tpublic static " + e1 + " " + e2 + "(" + e3 + ") throws Exception{\n" + e4 + "\t}\n"; :}
            | Type MAIN IDENTIFIER LPAREN OptionalFormalParams RPAREN Block:e {: RESULT = "\n\tpublic static void main(String[] args) throws Exception{\n" + e + "\n\t}"; :};

Type ::= INT_T  {: RESULT = "int"; :}
      | REAL_T {: RESULT = "double"; :}
      | STRING {: RESULT = "String"; :};

OptionalFormalParams ::= {: RESULT = ""; :}
                      | FormalParams:e {: RESULT = e; :};

FormalParams ::= Type:e1 IDENTIFIER:e2 {: RESULT = e1 + " " + e2; :}
              | Type:e1 IDENTIFIER:e2 COMMA FormalParams:e3 {: RESULT = e1 + " " + e2 + ", " + e3; :};

Block ::= BEGIN StatementList:e END {: RESULT = e; :};

StatementList ::= {: RESULT = ""; :}
               | Statement:e1 StatementList:e2 {: RESULT = e1 + " " + e2; :};

Statement ::= Block:e {: RESULT = e; :}
           | Type:e1 IDENTIFIER:e2 SEMICOLON {: RESULT = "\t\t" + e1 + " " + e2 + ";\n"; :}
           | Type:e1 AssignmentStatement:e2 {: RESULT = e1 + " " + e2; :}
           | AssignmentStatement:e {: RESULT = e; :}
           | RETURN Expression:e2 SEMICOLON {: RESULT = "\t\treturn" + " " + e2 + ";\n"; :}
           | IF LPAREN BoolExpression:e1 RPAREN Statement:e2 {: RESULT = "\t\tif" + "(" + e1 + ") {\n\t" + e2 + "\n\t}"; :}
           | IF LPAREN BoolExpression:e1 RPAREN Statement:e2 ELSE Statement:e3 {: RESULT = "\t\tif" + "(" + e1 + ") {\n\t" + e2 + "}\n\telse {\n\t" + e3 + "\t\t}"; :}
           | WRITE LPAREN Expression:e1 COMMA QUOTEDSTRING:e2 RPAREN SEMICOLON {: RESULT = "$tmp_real = Double.valueOf(" + e1 + "); bw_ = new BufferedWriter(new FileWriter(" + e2 + ")); bw_.write(\"\" + $tmp_real); bw_.close();";:}
           | READ LPAREN IDENTIFIER:e1 COMMA QUOTEDSTRING:e2 RPAREN SEMICOLON {: RESULT = "\t\tbr_ = new BufferedReader(new FileReader(" + e2 + "));\n\t\t" + e1 + " = Integer.parseInt(br_.readLine());\n"; :};

AssignmentStatement ::= IDENTIFIER:e1 EQUAL Expression:e2 SEMICOLON {: RESULT = "\t\t" + e1 + "=" + e2 + ";\n"; :}
                     | IDENTIFIER:e1 EQUAL QUOTEDSTRING:e2 SEMICOLON {: RESULT = "\t\t" + e1 + "=" + e2 + ";\n"; :};

Expression ::= MultiplicativeExpr:e1 ExpressionRest:e2 {: RESULT = e1 + "" + e2; :}
            | BoolExpression:e1 {: RESULT = e1; :};

ExpressionRest ::= {: RESULT = ""; :}
                | PLUS MultiplicativeExpr:e1 ExpressionRest:e2 {: RESULT = "+" + e1 + "" + e2; :}
                | MINUS MultiplicativeExpr:e1 ExpressionRest:e2  {: RESULT = "-" + e1 + "" + e2; :};

MultiplicativeExpr ::= PrimaryExpr:e1 MultiplicativeExprRest:e2 {: RESULT = e1 + "" + e2; :};

MultiplicativeExprRest ::= {: RESULT = ""; :}
                        | TIMES PrimaryExpr:e1 MultiplicativeExprRest:e2  {: RESULT = "*" + e1 + "" + e2; :}
                        | DIVIDE PrimaryExpr:e1 MultiplicativeExprRest:e2  {: RESULT = "/" + e1 + "" + e2; :};

PrimaryExpr ::= NUMBER:e {: RESULT = e; :}
             | IDENTIFIER:e {: RESULT = e; :}
             | LPAREN Expression:e RPAREN {: RESULT = "(" + e + ")"; :}
             | IDENTIFIER:e1 LPAREN OptionalActualParams:e2 RPAREN {: RESULT = e1+ "(" + e2 + ")"; :};

BoolExpression ::= Expression:e1 EQ Expression:e2 {: RESULT = e1 + " == " + e2; :}
                | Expression:e1 NE Expression:e2 {: RESULT = e1 + " != " + e2; :}
                | TRUE {: RESULT = "true"; :}
                | FALSE {: RESULT = "false"; :};

OptionalActualParams ::= {: RESULT = ""; :}
                      | ActualParams:e {: RESULT = e; :};

ActualParams ::= Expression:e {: RESULT = e; :}
              | Expression:e1 COMMA ActualParams:e2 {: RESULT = e1 + ", " + e2; :};